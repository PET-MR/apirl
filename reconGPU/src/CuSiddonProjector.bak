/**
	\file CuSiddonProjector.cpp
	\brief Archivo que contiene la implementación de la clase CuSiddonProjector.
	Es el proyector de siddon implementado en Cuda.
	\todo 
	\bug
	\warning
	\author Martín Belzunce (martin.a.belzunce@gmail.com)
	\date 2014.07.11
	\version 1.1.0
*/

#include <CuSiddonProjector.h>


__device__ __constant__ float d_RadioScanner_mm;

CuSiddonProjector::CuSiddonProjector()
{
  this->numSamplesOnDetector = 1;  
}

CuSiddonProjector::CuSiddonProjector(unsigned int numThreadsPerBlockX, unsigned int numThreadsPerBlockY, unsigned int numThreadsPerBlockZ, 
			     unsigned int numBlocksX, unsigned int numBlocksY, unsigned int numBlocksZ)
{
  /* Configuro el kernel de ejecución. */
  this->blockSize = dim3(numThreadsPerBlockX, numThreadsPerBlockY, numThreadsPerBlockZ);
  this->gridSize = dim3(numBlocksX, numBlocksY, numBlocksZ);
}

bool CuSiddonProjector::InitGpuMemory(Sinogram3DCylindricalPet* inputSinogram)
{
//   checkCudaErrors(cudaMemcpyToSymbol(cuda_threads_per_block, &(blockSizeProjector.x), sizeof(unsigned int)));
//   checkCudaErrors(cudaMemcpyToSymbol(cuda_threads_per_block_update_pixel, &(blockSizeImageUpdate.x), sizeof(unsigned int)));
//   checkCudaErrors(cudaMemcpyToSymbol(cuda_nr_splitter, &NR_Splitter, sizeof(unsigned int)));
//   checkCudaErrors(cudaMemcpyToSymbol(cuda_rows_splitter, &rowSplitter, sizeof(unsigned int)));
  float aux = inputSinogram->getRadioScanner_mm();
  checkCudaErrors(cudaMemcpyToSymbol(d_RadioScanner_mm, &aux, sizeof(inputSinogram->getRadioScanner_mm())));
}

/** Sección para Sinogram3D. */
bool CuSiddonProjector::Project (float* inputImage, Sinogram3DCylindricalPet* outputProjection)
{
  /* Este método simplemente encapsula la llamada al kernel.
    El tamaño de la ejecución del kernel está definida en las propiedades gridSize y blockSize de la clase.
    La misma se configura en el constructor o con el método setKernelConfig.
    */
  CUDA_Forward_Projection<<<gridSize, blockSize>>>(inputImage, float* michelogram, float* michelogram_measured, int numR, int numProj, int numRings);
  /// Sincronización de todos los threads.
  cudaThreadSynchronize();
  return true;
}


// bool CuSiddonProjector::Backproject (Sinogram3D* inputProjection, Image* outputImage)
// {
//   return true;
// }
// 
// /// Sobrecarga que realiza la Backprojection del cociente InputSinogram3D/EstimatedSinogram3D
// bool CuSiddonProjector::DivideAndBackproject (Sinogram3D* InputSinogram3D, Sinogram3D* EstimatedSinogram3D, Image* outputImage)
// {
//   
//   return true;
// }
// 
// bool CuSiddonProjector::Backproject (Sinogram2D* InputSinogram, Image* outputImage)
// {
//   
//   return true;
// }
// 
// /// Sobrecarga que realiza la Backprojection de InputSinogram/EstimatedSinogram
// bool CuSiddonProjector::DivideAndBackproject (Sinogram2D* InputSinogram, Sinogram2D* EstimatedSinogram, Image* outputImage)
// {
//   
//   return true;
// }
// 
// bool CuSiddonProjector::Project (Image* inputImage, Sinogram2D* outputProjection)
// {
//   
//   return true;
// }
// 
// 
// bool CuSiddonProjector::Backproject (Sinogram2Dtgs* InputSinogram, Image* outputImage)
// {
//   return true;
// }
// 
// /// Sobrecarga que realiza la Backprojection de InputSinogram/EstimatedSinogram
// bool CuSiddonProjector::DivideAndBackproject (Sinogram2Dtgs* InputSinogram, Sinogram2Dtgs* EstimatedSinogram, Image* outputImage)
// {
// 
//   return true;
// }
// 
// bool CuSiddonProjector::Project (Image* inputImage, Sinogram2Dtgs* outputProjection)
// {
// 
//   return true;
// }